// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/16/2022 20:26:02"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          placar
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module placar_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [0:2] btn;
reg ch;
reg [0:6] chave;
reg clk;
reg sinal;
// wires                                               
wire alerta;
wire [0:1] desl;
wire [0:6] saida;
wire [0:1] sclk;

// assign statements (if any)                          
placar i1 (
// port map - connection between master ports and signals/registers   
	.alerta(alerta),
	.btn(btn),
	.ch(ch),
	.chave(chave),
	.clk(clk),
	.desl(desl),
	.saida(saida),
	.sclk(sclk),
	.sinal(sinal)
);
initial 
begin 
#1000000 $finish;
end 
// btn[ 2 ]
initial
begin
	btn[2] = 1'b1;
end 
// btn[ 1 ]
initial
begin
	btn[1] = 1'b0;
end 
// btn[ 0 ]
initial
begin
	btn[0] = 1'b1;
end 

// ch
initial
begin
	ch = 1'b1;
end 
// chave[ 6 ]
initial
begin
	chave[6] = 1'b1;
end 
// chave[ 5 ]
initial
begin
	chave[5] = 1'b1;
end 
// chave[ 4 ]
initial
begin
	chave[4] = 1'b0;
end 
// chave[ 3 ]
initial
begin
	chave[3] = 1'b0;
end 
// chave[ 2 ]
initial
begin
	chave[2] = 1'b1;
end 
// chave[ 1 ]
initial
begin
	chave[1] = 1'b0;
end 
// chave[ 0 ]
initial
begin
	chave[0] = 1'b0;
end 

// clk
initial
begin
	clk = 1'b1;
end 

// sinal
initial
begin
	sinal = 1'b0;
end 
endmodule

